/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: alex.andain.777 (https://sketchfab.com/alex.andain.777)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/crow-all-animation-little-nightmares-2-2275a2c6f6d742d6bf189a3575323699
Title: Crow All animation Little Nightmares 2
*/

import * as THREE from 'three';
import { useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations, useCamera } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import useUserStore from '@/store';
import { useFrame, useThree } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Object_72: THREE.SkinnedMesh;
    _rootJoint: THREE.Bone;
  };
  materials: {
    MAT_Crow: THREE.MeshStandardMaterial;
  };
};

export default function Crow({ onHide, ...props }: JSX.IntrinsicElements['group'] & { onHide?: () => void }) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF('/models/crow_all_animation_little_nightmares_2.glb') as GLTFResult;
  const { actions, mixer } = useAnimations(animations, group);
  const [visible, setVisible] = useState(true);
  const isSinglePlayer = useUserStore((state) => state.isSinglePlayer);

  mixer.addEventListener('finished', () => setVisible(false));

  useEffect(() => {
    if (actions) {
      const idleAction = actions['SKM_Crow.ao|ANIM_Crow_IdleMeatPicking'];
      const flyOffAction = actions['SKM_Crow.ao|ANIM_Crow_FlyOffFromMeatPicking'];

      if (idleAction) {
        idleAction.play();
      }

      if (isSinglePlayer && flyOffAction) {
        flyOffAction.clampWhenFinished = true;
        flyOffAction.loop = THREE.LoopOnce;
        flyOffAction.play();
        mixer.addEventListener('finished', () => {
          setVisible(false);
          onHide?.();
        });
      }
    }
  }, [actions, isSinglePlayer]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={1.866}>
          <group name="110ea89c0a7a47f89e18d69e1a926d19fbx" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Light"
                  position={[407.625, 590.386, -100.545]}
                  rotation={[1.89, 0.881, -2.045]}
                  scale={100}
                >
                  <group name="Object_5" rotation={[Math.PI / 2, 0, 0]}>
                    <group name="Object_6" />
                  </group>
                </group>
                <group
                  name="Camera"
                  position={[735.889, 495.831, 692.579]}
                  rotation={[-Math.PI, 0.756, 2.68]}
                  scale={100}
                >
                  <group name="Object_8" />
                </group>
                <group name="SKM_Crowao" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                  <group name="Object_10">
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name="Object_72"
                      geometry={nodes.Object_72.geometry}
                      material={materials.MAT_Crow}
                      skeleton={nodes.Object_72.skeleton}
                    />
                    <group name="Object_71" rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                  </group>
                </group>
                <group name="SKM_Crowmo" rotation={[-Math.PI / 2, 0, 0]} scale={100} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/models/crow_all_animation_little_nightmares_2.glb');
